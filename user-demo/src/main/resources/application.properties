spring.cloud.config.discovery.enabled=false
spring.application.name=demo-service
server.port=9001

# nacos start
spring.cloud.nacos.discovery.enabled=false
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
# nacos end


#eureka.instance.statusPageUrlPath=${management.context-path}/info
#eureka.instance.healthCheckUrlPath=${management.context-path}/health
eureka.instance.leaseRenewalIntervalInSeconds=10
eureka.instance.leaseExpirationDurationInSeconds=10
#eureka.instance.metadataMap.instanceId=${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${server.port}}}
eureka.instance.preferIpAddress=true

eureka.client.registerWithEureka=true
eureka.client.fetchRegistry=true
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/
#eureka.client.healthcheck.enabled=true


# mysql data source Start
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://122.51.217.77:3306/demo?useUnicode=true&characterEncoding=utf-8
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.hikari.pool-name=demoPN
# mysql data source End


feign.hystrix.enabled=true

# hystrix start
#接口超时时间 在调用方配置，被该调用方的所有方法的超时时间都是该值，优先级低于下边的指定配置
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=1000
#当在配置时间窗口内达到此数量的失败后，进行短路。默认20个
#启用熔断器功能窗口时间内的最小请求数。试想如果没有这么一个限制，我们配置了 50% 的请求失败会打开熔断器，\
#  窗口时间内只有 3 条请求，恰巧两条都失败了，那么熔断器就被打开了，5s 内的请求都被快速失败。\
#  此配置项的值需要根据接口的 QPS 进行计算，值太小会有误打开熔断器的可能，值太大超出了时间窗口内的总请求数，\
#  则熔断永远也不会被触发。建议设置为 QPS * 窗口秒数 * 60%。
hystrix.command.default.circuitBreaker.requestVolumeThreshold = 20
#短路多久以后开始尝试是否恢复，默认5s
hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds = 5000
#出错百分比阈值，当达到此阈值后，开始短路。默认50%
hystrix.command.default.circuitBreaker.errorThresholdPercentage = 50

# 设置统计滚动窗口的持续时间，以毫秒为单位。默认10秒
metrics.rollingStats.timeInMilliseconds = 10000

#最大排队长度。默认-1，使用SynchronousQueue。其他值则使用 LinkedBlockingQueue。
#如果要从-1换成其他值则需重启，即该值不能动态调整，若要动态调整，需要使用到下边这个配置
hystrix.threadpool.default.maxQueueSize = 10
#排队线程数量阈值，默认为5，达到时拒绝，如果配置了该选项，队列的大小是该队列）注意：如果maxQueueSize=-1的话，则该选项不起作用
hystrix.threadpool.default.queueSizeRejectionThreshold = 5
hystrix.threadpool.default.coreSize=10
# hystrix end

hystrix.command.com#zhw#sc#user#client#UserClient.execution.isolation.thread.timeoutInMilliseconds=8000

# sentinel start
feign.sentinel.enabled=false
spring.cloud.sentinel.transport.port=8719
spring.cloud.sentinel.transport.dashboard=localhost:8080
# sentinel end

feign.okhttp.enabled=false

# ribbon start
#请求处理的超时时间
ribbon.ReadTimeout = 10000
#请求连接的超时时间
ribbon.ConnectTimeout = 30000
ribbon.MaxAutoRetries = 1
ribbon.MaxAutoRetriesNextServer = 0
ribbon.OkToRetryOnAllOperations=false
# ribbon end
